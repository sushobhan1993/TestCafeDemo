"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var semver = __importStar(require("semver"));
var unknownPlatform = {
    name: 'unknown',
    version: 'unknown',
};
var unknownBrowser = {
    name: 'unknown',
    version: 'unknown',
};
function getPlatformFrom(userAgent) {
    if (userAgent === undefined) {
        return __assign({}, unknownPlatform);
    }
    var sanitizedUserAgent = userAgent.replace(/\(https\:.*\)/gi, '');
    var parts = sanitizedUserAgent.split('/');
    if (parts.length <= 1) {
        console.warn("testcafe-reporter-cucumber-json: cannot get the Platform name from input string '" + userAgent + "'");
        return __assign({}, unknownPlatform);
    }
    var rawPlatorm = parts.pop();
    if (rawPlatorm === undefined) {
        console.warn("testcafe-reporter-cucumber-json: cannot get the Platform name from input string '" + userAgent + "'");
        return __assign({}, unknownPlatform);
    }
    var platformInfo = extractNameAndVersion(rawPlatorm);
    if (isMacOsX(platformInfo.name)) {
        return {
            name: 'osx',
            version: platformInfo.version,
        };
    }
    if (isWindows(platformInfo.name)) {
        return {
            name: 'windows',
            version: platformInfo.version,
        };
    }
    console.warn("testcafe-reporter-cucumber-json: cannot get the Platform name from input string '" + userAgent + "'");
    return __assign({}, unknownPlatform);
}
exports.getPlatformFrom = getPlatformFrom;
function getDeviceFrom(userAgent) {
    if (userAgent === undefined) {
        return 'undefined';
    }
    var parts = userAgent.split('/');
    if (parts.length <= 1) {
        return 'undefined';
    }
    var rawPlatorm = parts.pop();
    if (rawPlatorm === undefined) {
        return 'undefined';
    }
    var platformInfo = extractNameAndVersion(rawPlatorm);
    return platformInfo.name;
}
exports.getDeviceFrom = getDeviceFrom;
function isMacOsX(platformName) {
    if (platformName === undefined) {
        return false;
    }
    var result = platformName.toLowerCase().includes('mac') &&
        platformName.toLowerCase().includes('os');
    return result;
}
exports.isMacOsX = isMacOsX;
function isWindows(platformName) {
    if (platformName === undefined) {
        return false;
    }
    var result = platformName.toLowerCase().includes('windows');
    return result;
}
exports.isWindows = isWindows;
function extractNameAndVersion(input) {
    if (input === undefined || input === null) {
        return {
            name: 'unknown',
            version: 'unknown',
        };
    }
    var version = input
        .split(' ')
        .filter(function (item) { return semver.valid(item) !== null; })
        .pop() || 'unknown';
    var name = input.replace(version, '').trim();
    return {
        name: name,
        version: version,
    };
}
exports.extractNameAndVersion = extractNameAndVersion;
function getBrowserFrom(userAgent) {
    if (userAgent === undefined) {
        return __assign({}, unknownBrowser);
    }
    var parts = userAgent.split('/');
    if (parts.length === 0) {
        console.warn("testcafe-reporter-cucumber-json: cannot get the Browser name from input string '" + userAgent + "'");
        return __assign({}, unknownBrowser);
    }
    var rawBrowser = parts[0];
    if (rawBrowser === undefined) {
        console.warn("testcafe-reporter-cucumber-json: cannot get the Browser name from input string '" + userAgent + "'");
        return __assign({}, unknownBrowser);
    }
    var browserInfo = extractNameAndVersion(rawBrowser);
    var browserName = exports.browserNameMapping[browserInfo.name]
        ? exports.browserNameMapping[browserInfo.name]
        : 'unknown';
    return {
        name: browserName,
        version: browserInfo.version,
    };
}
exports.getBrowserFrom = getBrowserFrom;
exports.browserNameMapping = {
    Chrome: 'chrome',
    Edge: 'edge',
    Firefox: 'firefox',
    HeadlessChrome: 'chrome',
    IE: 'internet explorer',
    Opera: 'opera',
    Safari: 'safari',
};
//# sourceMappingURL=user-agent-parser.js.map